pipeline {
    agent any
    parameters {
        booleanParam defaultValue: false, name: 'blPackerShell'
        booleanParam defaultValue: false, name: 'blPackerAnsible'
        booleanParam defaultValue: false, name: 'blApplyAWS'
        booleanParam defaultValue: false, name: 'blApplyAzure'
        booleanParam defaultValue: false, name: 'blUpdateAWS'
        booleanParam defaultValue: false, name: 'blDestroy'

    }
    options {
        ansiColor('xterm')
    }
    environment {
        AZ_CRED = credentials('Azure_William')
    }
    stages {
        stage('Packer Shell') {
            when {expression{return params.blPackerShell}}
            steps {
                withAWS(credentials: 'AWS_JR8', region: 'ap-southeast-2') {
                    // some block
                    dir('packer/1.bake-ec2-to-image-shell-provisioner') {
                        sh '''
                            packer init .
                            packer fmt .
                            packer validate .
                            packer build aws-shell.pkr.hcl
                        '''
                    }
                }
            }
        }
        stage('Packer Ansible') {
            when {expression{return params.blPackerAnsible}}
            steps {
                withAWS(credentials: 'AWS_JR8', region: 'ap-southeast-2') {
                    // some block
                    dir('packer/2.bake-ec2-to-image-ansible-provisioner') {
                        sh '''
                            packer init .
                            packer fmt .
                            packer validate .
                            packer build aws-ansible.pkr.hcl
                        '''
                    }
                }
            }
        }
        stage('Launch Instances') {
            when {expression{return params.blApplyAWS}}
            steps {
                withAWS(credentials: 'AWS_JR8', region: 'ap-southeast-2') {
                    // some block
                    dir('terraform/aws') {
                        sh '''
                            terraform init
                            terraform apply --auto-approve
                        '''
                    }
                }
            }
        }
        stage('Launch AZ Instances') {
            when {expression{return params.blApplyAzure}}
            steps {
                dir('terraform/az') {
                    sh '''
                        az login --service-principal -u $AZ_CRED_CLIENT_ID -p $AZ_CRED_CLIENT_SECRET -t $AZ_CRED_TENANT_ID
                        terraform init
                        terraform apply --auto-approve
                    '''
                }
            }
        }
        stage('Update AWS EC2') {
            when {expression{return params.blUpdateAWS}}
            steps {
                withAWS(credentials: 'AWS_JR8', region: 'ap-southeast-2') {
                    // some block
                    dir('ansible') {
                        sh '''
                            ansible all  -m ping
                            ansible tag_shell -a "cat /home/ubuntu/hello.txt"
                            ansible tag_ansible -a "curl localhost"
                        '''
                    }
                }
            }
        }
        stage('Destroy Instances') {
            when {expression{return params.blDestroy}}
            steps {
                withAWS(credentials: 'AWS_JR8', region: 'ap-southeast-2') {
                    // some block
                    dir('terraform/aws') {
                        sh '''
                            terraform destroy --auto-approve
                        '''
                    }
                    sh '''
                        AMIList=($(aws ec2 describe-images --owners=self --filters "Name=name,Values=*packer-demo*" --query 'Images[*].[ImageId]' --output text))
                        for i in $AMIList
                        do
                            echo "Destroying AMI ID: $i"
                        done
                    '''
                    //aws ec2 deregister-image --image-id $i
                    dir('terraform/az') {
                        sh '''
                            terraform destroy --auto-approve
                        '''
                    }
                }
            }
        }
    }
}
